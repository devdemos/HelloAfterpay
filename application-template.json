{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-0ebe863c3d16bca9d"
            },
            "ap-southeast-1": {
                "AMI": "ami-043f9106e7f451340"
            },
            "ap-southeast-2": {
                "AMI": "ami-08a74056dfd30c986"
            },
            "us-east-1": {
                "AMI": "ami-00b882ac5193044e4"
            },
            "us-east-2": {
                "AMI": "ami-09d9edae5eb90d556"
            },
            "us-west-1": {
                "AMI": "ami-0e9f62b664e24851b"
            },
            "us-west-2": {
                "AMI": "ami-000b133338f7f4255"
            }
        }
    },
    "Parameters": {
        "ClusterSize": {
            "Default": "2",
            "Description": "Number of Nodes in Autoscaling Group",
            "MaxValue": "3",
            "MinValue": "2",
            "Type": "Number"
        },
        "InstanceType": {
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type",
            "Default": "t2.micro",
            "Description": "EC2 Instance Type (t2.micro, etc)",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "ELBSubnetId": {
            "Description": "Public Subnets of your existing (VPC) for Load Balancer",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "SubnetId": {
            "Description": "Private Subnets of your existing (VPC) for EC2 Instances",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "VpcId": {
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "Type": "AWS::EC2::VPC::Id"
        },
        "SSHLocation" : {
            "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },
    },
    "Resources": {
        "ApplicationS3BucketPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
              "PolicyName" : "ApplicationS3BucketPolicy",
              "PolicyDocument" : {
                "Statement" : [
                  {
                    "Effect" : "Allow",
                    "Action" : [
                      "s3:List*",
                      "s3:GetObject"
                    ],
                    "Resource" : "*"
                  }
                ]
              },
              "Roles" : [
                {
                  "Ref" : "ApplicationS3BucketRole"
                }
              ]
            }
        },
        "ApplicationS3BucketInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ApplicationS3BucketRole"
                    }
                ]
            },
        },
        "ApplicationS3BucketRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
        },
        "ApplicationAutoscalingGroup": {
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                    }
                },
                "DesiredCapacity": {
                    "Ref": "ClusterSize"
                },
                "LaunchConfigurationName": {
                    "Ref": "ApplicationLaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": "5",
                "MinSize": "2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackId"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Environment",
                        "Value": "NonProd",
                        "PropagateAtLaunch": true
                    }
                ],
                "VPCZoneIdentifier": {
                    "Ref": "SubnetId"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "ApplicationLaunchConfig": {
            "Properties": {
                "IamInstanceProfile": {"Ref": "ApplicationS3BucketInstanceProfile"},
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ApplicationSecGrp"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "sudo yum -y update\n",
                                "sudo yum -y install puppet\n",
                                "sudo yum -y install git\n",
                                "sudo yum -y install gcc openssl-devel bzip2-devel libffi-devel\n",
                                "sudo amazon-linux-extras install docker -y\n",
                                "sudo amazon-linux-extras install epel -y\n",
                                "rpm -ivh http://yum.puppetlabs.com/puppet-release-el-7.noarch.rpm\n",
                                "sudo yum -y install puppet\n",
                                "export PATH=/opt/puppetlabs/bin:$PATH\n",
                                "puppet module install puppetlabs-ntp --version 8.1.0\n",
                                "puppet module install eyp-sysctl --version 0.3.5\n",
                                "sudo service docker start\n",
                                "sudo usermod -a -G docker ec2-user\n",
                                "aws s3 cp s3://devdemos-repos /home/ec2-user --recursive\n",
                                "cd /home/ec2-user/api-application-stack\n",
                                "pwd\n",
                                "ls -l\n",
                                "sudo docker build -t api-application:latest .\n",
                                "sudo docker run -d -p 80:5000 api-application:latest\n",
                                "sudo chmod +x config/config.bash\n",
                                "sudo ./config/config.bash\n",
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ApplicationSecGrp": {
            "Properties": {
                "GroupDescription": "Enable SSH and HTTP access on the inbound port",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": { "Ref" : "SSHLocation" },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "dev-app-private-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-sg"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadBalancer": {
            "Properties": {
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "30",
                    "Target": "HTTP:80/",
                    "Timeout": "15",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "LoadBalancerName": "application-lb",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets":
                    {
                        "Ref": "ELBSubnetId"
                    }
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable HTTP access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "ApplicationSecGrp"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "dev-app-elb-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-sg"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    },
    
    "Outputs" : {
        "URL" : {
          "Description" : "URL of the website",
          "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}]]}
        }
      }
}
